{"version":3,"sources":["store/participants/selectors.ts","utils/helpers/formatDateYYYYMMDD.ts","store/participants/reducer.ts","store/rootReducer.ts","store/index.ts","store/participants/actions.ts","components/LoadingSpinner/LoadingSpinner.tsx","serviceWorker.ts","utils/hoc/withRedirectToProfile.tsx","store/participants/participantsMockData.ts","services/index.ts","store/participants/api.ts","store/participants/thunk.ts","routes/AppRoutes.ts","utils/hoc/withRedirectToHome.tsx","logo.svg","components/AppNavBar/AppNavBar.tsx","views/index.tsx","utils/hoc/withSuspense.tsx","index.tsx","store/participants/acTypes.ts"],"names":["participantsSelectors","baseParticipants","state","participants","isUserAuth","currentUser","participantsIds","Object","keys","loading","formatDateYYYYMMDD","dateStr","y","getFullYear","month","getMonth","mo","day","getDate","d","initialCurrentUser","userId","FIO","birthday","Date","date","email","phone","distance","payment","password","initialState","error","isError","message","rootReducer","combineReducers","action","type","payload","PARTICIPANTS_TYPES","SET_PARTICIPANTS_DATA_TYPE","Array","isArray","length","assign","PUSH_NEW_PARTICIPANT_TYPE","participant","SET_CURRENT_USER_TYPE","user","UPDATE_CURRENT_PARTICIPANT_TYPE","LOGOUT_USER_TYPE","SET_LOADING_TYPE","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","useAppDispatch","dispatch","useDispatch","ActionCreator","participantsAC","setParticipantsDataAC","pushNewParticipantAC","setCurrentUserAC","updateCurrentParticipantAC","logoutUserAC","setLoadingAC","LoadingSpinner","animation","variant","Boolean","location","hostname","match","Component","participantsMockData","agreement","ApiService","returnPromiseWithData","data","timeout","Promise","resolve","reject","setTimeout","Math","random","Error","console","log","participantsApi","api","answer","participantsTC","a","getParticipants","code","AppRoutes","link","title","exact","component","React","lazy","props","useSelector","to","pathname","from","withRedirectToHome","AppNavBar","history","useHistory","className","Navbar","bg","expand","Container","alt","src","Logo","width","height","Toggle","Collapse","id","Nav","Text","style","marginRight","Button","onClick","push","Root","useEffect","fetchParticipants","map","page","path","WrappedComponent","Suspense","fallback","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ad65eeef.chunk.js","sourcesContent":["import {TAppState} from \"../index\";\n\ninterface IRootState extends TAppState {}\n\nconst baseParticipants = (state: IRootState) => state.participants;\nconst isUserAuth = (state: IRootState) => state.participants.isUserAuth;\nconst currentUser = (state: IRootState) => state.participants.currentUser;\nconst participants = (state: IRootState) => state.participants.participants;\nconst participantsIds = (state: IRootState) => Object.keys(state.participants.participants);\nconst loading = (state: IRootState) => state.participants.loading;\n\nexport const participantsSelectors = {\n  baseParticipants,\n  isUserAuth,\n  currentUser,\n  participants,\n  participantsIds,\n  loading,\n};","export function formatDateYYYYMMDD(dateStr: Date) {\n\n  const y = dateStr.getFullYear();\n  const month = dateStr.getMonth() + 1;\n  const mo = (month <= 9 ? '0' + month : month);\n  const day = dateStr.getDate();\n  const d = (day <= 9 ? '0' + day : day);\n\n  return `${y}-${mo}-${d}`;\n}","import { PARTICIPANTS_TYPES } from \"./acTypes\";\nimport { TParticipantsAC } from \"./actions\";\nimport { formatDateYYYYMMDD } from \"../../utils/helpers/formatDateYYYYMMDD\";\n\nexport interface IFormValues {\n  FIO: string\n  birthday: Date\n  email: string\n  phone: string\n  distance: 3 | 5 | 10\n  payment: number\n  password?: string\n}\nexport interface IParticipant extends IFormValues {\n  date: string\n}\nexport interface ICurrentUser extends IParticipant {\n  userId: number | null\n}\nexport interface IParticipantsAssoc {\n  [key: number]: IParticipant\n}\nexport type TParticipantsState = {\n  currentUser: ICurrentUser\n  participants: IParticipantsAssoc\n  loading: boolean\n  isUserAuth: boolean\n  error: {\n    isError: boolean\n    message: string\n  }\n}\nconst initialCurrentUser: ICurrentUser = {\n  userId: null,\n  FIO: \"\",\n  birthday: new Date(),\n  date: formatDateYYYYMMDD(new Date()),\n  email: \"\",\n  phone: \"\",\n  distance: 3,\n  payment: 100,\n  password: \"\",\n};\n\nlet initialState: TParticipantsState = {\n  currentUser: initialCurrentUser,\n  participants: {},\n  loading: false,\n  isUserAuth: false,\n  error: {\n    isError: false,\n    message: \"\"\n  }\n};\n\nexport const participantsReducer = (state: TParticipantsState = initialState,\n                                    action: TParticipantsAC): TParticipantsState => {\n  const { type, payload } = action;\n\n  switch (type) {\n\n    case PARTICIPANTS_TYPES.SET_PARTICIPANTS_DATA_TYPE: {\n      return Array.isArray(payload.participants) && payload.participants.length > 0\n        ? {...state,\n          participants: {\n            ...state.participants,\n            ...Object.assign({}, [...payload.participants])\n          }\n        } : state;\n    }\n\n    case PARTICIPANTS_TYPES.PUSH_NEW_PARTICIPANT_TYPE: {\n      return {\n        ...state,\n        participants: {\n          ...state.participants,\n          [Object.keys(state.participants).length]: {...payload.participant, date: formatDateYYYYMMDD(new Date())}\n        }\n      }\n    }\n\n    case PARTICIPANTS_TYPES.SET_CURRENT_USER_TYPE: {\n      return {\n        ...state,\n        currentUser: {...payload.user, userId: Object.keys(state.participants).length - 1},\n        isUserAuth: true,\n      }\n    }\n\n    case PARTICIPANTS_TYPES.UPDATE_CURRENT_PARTICIPANT_TYPE: {\n      return state.currentUser.userId !== null ? {\n        ...state,\n        participants: {\n          ...state.participants,\n          [state.currentUser.userId]: {\n            ...state.participants[state.currentUser.userId],\n            ...payload.user\n          }\n        }\n      } : state;\n    }\n\n    case PARTICIPANTS_TYPES.LOGOUT_USER_TYPE: {\n      return {...state, currentUser: {...initialCurrentUser}, isUserAuth: false}\n    }\n\n    case PARTICIPANTS_TYPES.SET_LOADING_TYPE: {\n      return {...state, loading: payload.loading}\n    }\n\n    default:\n      return state;\n  }\n};\n\n\n\n","import { combineReducers } from \"redux\";\n\nimport { participantsReducer } from \"./participants/reducer\";\n\nexport const rootReducer = combineReducers({\n  participants: participantsReducer,\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\nimport {useDispatch} from \"react-redux\";\n\nimport {rootReducer} from \"./rootReducer\";\nimport {TAppActions} from \"./appActionsTyping\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(thunkMiddleware)\n  )\n);\n\nexport type TAppState = ReturnType<typeof rootReducer>;\n\n// 1 параметр - описываем, что возвращает thunk\n// 3 параметр - экстра аргументы\nexport type TAppThunk = ThunkAction<void, TAppState, unknown, TAppActions>\n\nexport function useAppDispatch() {\n  const dispatch = useDispatch();\n  return (ActionCreator: TAppThunk | TAppActions) => dispatch(ActionCreator);\n}\n\n// @ts-ignore\nwindow.store = store;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import { PARTICIPANTS_TYPES } from \"./acTypes\";\nimport { IFormValues, IParticipant } from \"./reducer\";\n\nexport type TParticipantsAC =\n    ReturnType<typeof setParticipantsDataAC>\n    | ReturnType<typeof pushNewParticipantAC>\n    | ReturnType<typeof setCurrentUserAC>\n    | ReturnType<typeof updateCurrentParticipantAC>\n    | ReturnType<typeof logoutUserAC>\n    | ReturnType<typeof setLoadingAC>\n\nexport const setParticipantsDataAC = (participants: IParticipant[]) => ({\n  type: PARTICIPANTS_TYPES.SET_PARTICIPANTS_DATA_TYPE,\n  payload: { participants }\n} as any);\n\nexport const pushNewParticipantAC = (participant: IFormValues) => ({\n  type: PARTICIPANTS_TYPES.PUSH_NEW_PARTICIPANT_TYPE,\n  payload: { participant }\n} as any);\n\nexport const setCurrentUserAC = (user: IFormValues) => ({\n  type: PARTICIPANTS_TYPES.SET_CURRENT_USER_TYPE,\n  payload: { user }\n} as any);\n\nexport const updateCurrentParticipantAC = (user: IFormValues) => ({\n  type: PARTICIPANTS_TYPES.UPDATE_CURRENT_PARTICIPANT_TYPE,\n  payload: { user }\n} as any);\n\nexport const logoutUserAC = () => ({\n  type: PARTICIPANTS_TYPES.LOGOUT_USER_TYPE,\n} as any);\n\nexport const setLoadingAC = (loading: boolean) => ({\n  type: PARTICIPANTS_TYPES.SET_LOADING_TYPE,\n  payload: { loading }\n} as any);\n\nexport const participantsAC = {\n  setParticipantsDataAC,\n  pushNewParticipantAC,\n  setCurrentUserAC,\n  updateCurrentParticipantAC,\n  logoutUserAC,\n  setLoadingAC\n};\n","import React from 'react';\nimport { Container, Spinner } from \"react-bootstrap\";\n\nexport const LoadingSpinner = () => {\n  return (\n    <Container>\n      <Spinner animation=\"border\" variant=\"primary\" />\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from 'react-router-dom';\n\nimport { participantsSelectors } from \"../../store/participants/selectors\";\n\nexport const withRedirectToProfile = (Component: React.FC) => (props: any) => {\n  const { isUserAuth } = useSelector(participantsSelectors.baseParticipants);\n\n  if (isUserAuth) {\n    return (\n      <Redirect to={{\n        pathname: '/profile',\n        state: {from: props.location},\n      }}/>\n    );\n  }\n\n  return <Component/>\n};\n","export const participantsMockData = [\n  {\n    FIO: \"Иванов Иван Иваныч\",\n    birthday: \"1967-7-28\",\n    date: \"1997-05-08\",\n    email: \"fake@mail.com\",\n    phone: \"79222222222\",\n    distance: 3,\n    payment: 100,\n    agreement: true,\n    password: \"asdfg\"\n  },\n  {\n    FIO: \"Петров Петр Иваныч\",\n    birthday: \"1986-5-27\",\n    date: \"1992-05-08\",\n    email: \"fake@mail.com\",\n    phone: \"79222222222\",\n    distance: 5,\n    payment: 200,\n    agreement: false,\n  },\n  {\n    FIO: \"Сидоров Алексей Иваныч\",\n    birthday: \"1981-6-27\",\n    date: \"1912-05-08\",\n    email: \"fake@mail.com\",\n    phone: \"79222222222\",\n    distance: 10,\n    payment: 300,\n    agreement: false,\n  },\n  {\n    FIO: \"Петрова Ирина Ивановна\",\n    birthday: \"1986-5-27\",\n    date: \"2000-05-08\",\n    email: \"fake@mail.com\",\n    phone: \"79222222222\",\n    distance: 5,\n    payment: 200,\n    agreement: false,\n  },\n  {\n    FIO: \"Сидорова Татьяна Ивановна\",\n    birthday: \"1981-6-27\",\n    date: \"2002-05-08\",\n    email: \"fake@mail.com\",\n    phone: \"79222222222\",\n    distance: 10,\n    payment: 300,\n    agreement: false,\n  },\n];","export class ApiService {\n  returnPromiseWithData = (data: any, timeout: number) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (Math.random() > 1) {\n          reject(new Error(\"Похоже, что-то пошло не так :(\"));\n        } else {\n          console.log('Ответ от сервера: Данные отправлены');\n          resolve(data)\n        }\n      }, timeout)\n    })\n  };\n}\n","import { participantsMockData } from \"./participantsMockData\";\nimport { ApiService } from \"../../services\";\n\nexport class participantsApi {\n  static getParticipants(): Promise<any> {\n\n    const api = new ApiService();\n\n    const answer = {\n      \"code\": 200,\n      \"status\": \"OK\",\n      \"data\": {\n        \"participants\": participantsMockData\n      }\n    };\n\n    return api\n      .returnPromiseWithData(answer, 1000)\n  };\n}\n","import { TAppThunk } from \"../index\";\nimport { participantsAC } from \"./actions\";\nimport { participantsApi } from \"./api\";\n\nexport class participantsTC {\n static fetchParticipants(): TAppThunk {\n   return async (dispatch) => {\n\n     dispatch(participantsAC.setLoadingAC(true));\n\n     try {\n       const data = await participantsApi.getParticipants();\n\n       if (data.code === 200) {\n         console.log('Ответ от клиента: Данные Получены');\n         dispatch(participantsAC.setParticipantsDataAC(data.data.participants));\n       }\n     } catch (error) {\n       new Error(`Похоже, что-то пошло не так: ${error}`)\n     } finally {\n       dispatch(participantsAC.setLoadingAC(false));\n     }\n   };\n }\n}\n","import React, { ComponentType } from 'react';\nimport { RouteComponentProps } from \"react-router\";\nimport { withRedirectToHome } from \"../utils/hoc/withRedirectToHome\";\nimport { withRedirectToProfile } from \"../utils/hoc/withRedirectToProfile\";\n\nconst Home = React.lazy(() =>\n  import(/* webpackChunkName: \"views-home\" */ '../views/Home')\n);\n\nconst Participants = React.lazy(() =>\n  import(/* webpackChunkName: \"views-participants\" */ '../views/Participants')\n);\n\nconst Profile = React.lazy(() =>\n  import(/* webpackChunkName: \"views-profile\" */ '../views/Profile')\n);\n\ninterface IRoute {\n  link: string\n  title: string\n  exact: boolean\n  component: ComponentType<RouteComponentProps<any>> | ComponentType<any>\n}\n\nexport const AppRoutes: IRoute[] = [\n  {\n    link: '/',\n    title: 'Home',\n    exact: true,\n    component: withRedirectToProfile(Home),\n  },\n  {\n    link: \"/participants\",\n    title: \"Participants\",\n    exact: false,\n    component: Participants,\n  },\n  {\n    link: \"/profile\",\n    title: \"Profile\",\n    exact: false,\n    component: withRedirectToHome(Profile),\n  },\n];\n","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from 'react-router-dom';\n\nimport { participantsSelectors } from \"../../store/participants/selectors\";\n\nexport const withRedirectToHome = (Component: React.FC) => (props: any) => {\n  const { isUserAuth } = useSelector(participantsSelectors.baseParticipants);\n\n  if (!isUserAuth) {\n    return (\n      <Redirect to={{\n        pathname: '/',\n        state: {from: props.location},\n      }}/>\n    );\n  }\n\n  return <Component/>\n};\n","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import React from 'react';\nimport { Button, Container, Nav, Navbar } from \"react-bootstrap\";\nimport {NavLink, useHistory} from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport Logo from \"../../logo.svg\";\n\nimport { useAppDispatch } from \"../../store\";\nimport { participantsSelectors } from \"../../store/participants/selectors\";\nimport { participantsAC } from \"../../store/participants/actions\";\n\nexport const AppNavBar = () => {\n  const { isUserAuth, currentUser } = useSelector(participantsSelectors.baseParticipants);\n\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n  const handleLogout = () => {\n    dispatch(participantsAC.logoutUserAC());\n    history.push(\"/\");\n  };\n\n  return (\n    <header className=\"header\">\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Container>\n          <NavLink className=\"navbar-brand\" to={'/'}>\n            <img\n              alt=\"IT-Resource\"\n              src={Logo}\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />{' '}\n            IT-Resource\n          </NavLink>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"me-auto\">\n              <NavLink className=\"nav-link\" to={'/participants'}>Participants</NavLink>\n\n              {isUserAuth && (\n                <NavLink\n                  className=\"nav-link\"\n                  to={'/profile'}\n                >\n                  Profile\n                </NavLink>\n              )}\n            </Nav>\n\n            {isUserAuth && (\n              <>\n                <Navbar.Text style={{marginRight: 24}}>\n                  Добро пожаловать, {currentUser.FIO}!\n                </Navbar.Text>\n\n                <Button\n                  onClick={handleLogout}\n                  variant=\"outline-secondary\"\n                >\n                  Выйти\n                </Button>\n              </>\n            )}\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </header>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Container } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\n\nimport { useAppDispatch } from \"../store\";\nimport { participantsTC } from \"../store/participants/thunk\";\nimport { participantsSelectors } from \"../store/participants/selectors\";\n\nimport { AppRoutes } from \"../routes/AppRoutes\";\nimport { withSuspense } from \"../utils/hoc/withSuspense\";\nimport { AppNavBar } from \"../components/AppNavBar/AppNavBar\";\n\nexport const Root = () => {\n  const participants = useSelector(participantsSelectors.participants);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (Object.keys(participants).length === 0) {\n      dispatch(participantsTC.fetchParticipants());\n    }\n  }, [dispatch, participants]);\n\n  return (\n    <>\n      <AppNavBar />\n\n      <main>\n        <Switch>\n          {AppRoutes.map((page) =>\n            <Route\n              exact={page.exact}\n              path={page.link}\n              component={withSuspense(page.component)}\n              key={page.title}\n            />)}\n          <Route component={() => <Container>404! Not Found!</Container>}/>\n        </Switch>\n      </main>\n    </>\n  );\n};\n","import React from 'react'\nimport { LoadingSpinner } from \"../../components/LoadingSpinner/LoadingSpinner\";\n\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n  return (props: WCP) => {\n    return (\n      <React.Suspense fallback={<><LoadingSpinner /></>}>\n        <WrappedComponent {...props as WCP}/>\n      </React.Suspense>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from \"./store\";\nimport { Root } from \"./views\";\n\nlet reRenderEntireTree = () => {\n  ReactDOM.render(\n      <Provider store={store}>\n        <BrowserRouter>\n          <Root/>\n        </BrowserRouter>\n      </Provider>,\n    document.getElementById('root')\n  );\n};\n\nreRenderEntireTree();\n\n//store.subscribe(reRenderEntireTree);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nconst SET_PARTICIPANTS_DATA_TYPE = 'Participants/SET_PARTICIPANTS_DATA_TYPE';\nconst PUSH_NEW_PARTICIPANT_TYPE = 'Participants/PUSH_NEW_PARTICIPANT_TYPE';\nconst SET_CURRENT_USER_TYPE = 'Participants/SET_CURRENT_USER_TYPE';\nconst UPDATE_CURRENT_PARTICIPANT_TYPE = 'Participants/UPDATE_CURRENT_PARTICIPANT_TYPE';\nconst LOGOUT_USER_TYPE = 'Participants/LOGOUT_USER_TYPE';\nconst SET_LOADING_TYPE = 'Participants/SET_LOADING_TYPE';\n\nexport enum PARTICIPANTS_TYPES {\n  SET_PARTICIPANTS_DATA_TYPE,\n  PUSH_NEW_PARTICIPANT_TYPE,\n  SET_CURRENT_USER_TYPE,\n  UPDATE_CURRENT_PARTICIPANT_TYPE,\n  LOGOUT_USER_TYPE,\n  SET_LOADING_TYPE,\n}"],"sourceRoot":""}