{"version":3,"sources":["components/InputDatePicker/InputDatePicker.tsx","components/InputDatePicker/InputDatePicker.module.css","views/Profile/Profile.tsx","views/Profile/index.tsx"],"names":["InputDatePicker","memo","props","birthday","renderFormInput","useState","startDate","setStartDate","registerLocale","ru","locale","autoComplete","wrapperClassName","css","DatePicker","customInput","selected","onChange","date","minDate","addYears","Date","maxDate","addDays","showDisabledMonthNavigation","dateFormat","module","exports","Profile","currentUser","updateCurrentParticipant","setCurrentUser","FIO","initialValues","email","phone","distance","payment","password","validationSchema","Yup","required","min","max","history","useHistory","formik","useFormik","onSubmit","values","push","useCallback","Form","Control","getFieldProps","Container","handleSubmit","className","Group","controlId","Label","errors","mask","as","handleChange","value","inputProps","name","tooltipPlacement","type","Button","variant","style","maxWidth","disabled","ProfileView","useSelector","participantsSelectors","dispatch","useAppDispatch","agreement","participantsAC","updateCurrentParticipantAC","setCurrentUserAC"],"mappings":"gPAaaA,EAAmDC,gBAAK,SAACC,GACpE,IACEC,EAEED,EAFFC,SACAC,EACEF,EADFE,gBAGF,EAAkCC,mBAAeF,GAAjD,mBAAOG,EAAP,KAAkBC,EAAlB,KAIA,OAFAC,yBAAe,KAAKC,KAGlB,8BACE,cAAC,IAAD,CACEC,OAAQ,KACRC,aAAc,eACdC,iBAAkBC,IAAIC,WACtBC,YAAaX,IACbY,SAAUV,EACVW,SAAU,SAACC,GAAD,OAAgBX,EAAaW,IACvCC,QAASC,kBAAS,IAAIC,MAAS,IAC/BC,QAASC,kBAAQ,IAAIF,KAAQ,GAC7BG,6BAA2B,EAC3BC,WAAW,+B,oBClCnBC,EAAOC,QAAU,CAAC,WAAa,sC,yMCoBlBC,EAAgC3B,gBAAK,SAACC,GACjD,IACE2B,EAIE3B,EAJF2B,YAEAC,EAEE5B,EAFF4B,yBACAC,EACE7B,EADF6B,eAIAC,EAOEH,EAPFG,IACA7B,EAME0B,EANF1B,SAQI8B,EAA6B,CACjCD,MACA7B,WACA+B,MALEL,EALFK,MAWAC,MANEN,EAJFM,MAWAC,SAPEP,EAHFO,SAWAC,QARER,EAFFQ,QAWAC,SATET,EADFS,UAaIC,EAAmBC,IAAW,CAClCR,IAAKQ,MAAaC,SAAS,+FAE3BP,MAAOM,MAAaN,MAAM,2GAAsBO,SAAS,+FAEzDN,MAAOK,MAAaC,SAAS,+FAE7BH,SAAWE,MAAaC,SAAS,+FAC9BC,IAAI,EAAG,2FACPC,IAAI,GAAI,0GAGPC,EAAUC,cAEVC,EAASC,YAAU,CACvBd,gBACAM,mBACAS,SAAU,SAAAC,GAERlB,EAAekB,GACfnB,EAAyBmB,GACzBL,EAAQM,KAAK,oBAIX9C,EAAkB+C,uBAAY,kBAClC,cAACC,EAAA,EAAKC,QAAN,eAAkBP,EAAOQ,cAAc,gBACtC,CAACR,IAEJ,OACE,cAACS,EAAA,EAAD,UACE,eAACH,EAAA,EAAD,CACEJ,SAAUF,EAAOU,aACjBC,UAAU,MAFZ,UAIE,eAACL,EAAA,EAAKM,MAAN,CAAYD,UAAU,0BAA0BE,UAAU,MAA1D,UACE,cAACP,EAAA,EAAKQ,MAAN,6HAEA,cAACR,EAAA,EAAKC,QAAN,eAAkBP,EAAOQ,cAAc,SAEtCR,EAAOe,OAAO7B,IAAM,qBAAKyB,UAAU,gBAAf,SAAgCX,EAAOe,OAAO7B,MAAa,QAGlF,eAACoB,EAAA,EAAKM,MAAN,CAAYD,UAAU,0BAA0BE,UAAU,WAA1D,UACE,cAACP,EAAA,EAAKQ,MAAN,wFAEA,cAAC5D,EAAA,EAAD,CACEI,gBAAiBA,EACjBD,SAAUA,OAId,eAACiD,EAAA,EAAKM,MAAN,CAAYD,UAAU,0BAA0BE,UAAU,QAA1D,UACE,cAACP,EAAA,EAAKQ,MAAN,oBAEA,cAACR,EAAA,EAAKC,QAAN,eAAkBP,EAAOQ,cAAc,WAEtCR,EAAOe,OAAO3B,MAAQ,qBAAKuB,UAAU,gBAAf,SAAgCX,EAAOe,OAAO3B,QAAe,QAGtF,eAACkB,EAAA,EAAKM,MAAN,CAAYD,UAAU,0BAA0BE,UAAU,QAA1D,UACE,cAACP,EAAA,EAAKQ,MAAN,yDAEA,cAAC,IAAD,aACEE,KAAK,qBACLL,UAAU,gBACNX,EAAOQ,cAAc,WAG1BR,EAAOe,OAAO1B,MAAQ,qBAAKsB,UAAU,gBAAf,SAAgCX,EAAOe,OAAO1B,QAAe,QAGtF,eAACiB,EAAA,EAAKM,MAAN,CAAYD,UAAU,0BAA0BE,UAAU,WAA1D,UACE,cAACP,EAAA,EAAKQ,MAAN,qEAEA,eAACR,EAAA,EAAKC,QAAN,CACEU,GAAG,SACH9C,SAAU6B,EAAOkB,aAAa,YAC9BC,MAAOnB,EAAOG,OAAOb,SAHvB,UAKE,wBAAQ6B,MAAM,IAAd,6BACA,wBAAQA,MAAM,IAAd,6BACA,wBAAQA,MAAM,KAAd,oCAIJ,eAACb,EAAA,EAAKM,MAAN,CAAYD,UAAU,0BAA0BE,UAAU,UAA1D,UACE,cAACP,EAAA,EAAKQ,MAAN,uGAEA,cAAC,IAAD,CACEM,WAAY,CAACC,KAAM,WACnBzB,IAAK,IACLC,IAAK,IACLyB,iBAAiB,MACjBnD,SAAU6B,EAAOkB,aAAa,WAC9BC,MAAOnB,EAAOG,OAAOZ,aAIzB,eAACe,EAAA,EAAKM,MAAN,CAAYD,UAAU,0BAA0BE,UAAU,WAA1D,UACE,cAACP,EAAA,EAAKQ,MAAN,mDAEA,cAACR,EAAA,EAAKC,QAAN,aAAcgB,KAAK,YAAevB,EAAOQ,cAAc,cAEtDR,EAAOe,OAAOvB,SAAW,qBAAKmB,UAAU,gBAAf,SAAgCX,EAAOe,OAAOvB,WAAkB,QAG5F,cAACc,EAAA,EAAKM,MAAN,CAAYD,UAAU,OAAtB,SACE,cAACa,EAAA,EAAD,CACEC,QAAQ,UACRF,KAAK,SACLG,MAAO,CAACC,SAAU,KAClBC,WAAY5B,EAAOe,OAAOvB,YAAcQ,EAAOe,OAAO3B,MAJxD,8EChIKyC,UAnBK,WAClB,IAAM9C,EAAc+C,YAAYC,IAAsBhD,aAEhDiD,EAAWC,cAKjB,OACE,cAACnD,EAAD,CACEC,YAAaA,EACbmD,WAAW,EAEXlD,yBAR6B,SAACmB,GAAD,OAAyB6B,EAASG,IAAeC,2BAA2BjC,KASzGlB,eARmB,SAACkB,GAAD,OAAyB6B,EAASG,IAAeE,iBAAiBlC","file":"static/js/views-profile.cb4bfb31.chunk.js","sourcesContent":["import React, { memo, ReactNode, useState } from 'react';\nimport DatePicker, { registerLocale } from \"react-datepicker\";\nimport { addDays, addYears } from \"date-fns\";\nimport ru from \"date-fns/locale/ru\";\n\nimport css from \"./InputDatePicker.module.css\"\nimport \"react-datepicker/dist/react-datepicker.css\";\n\ntype TInputDatePickerProps = {\n  birthday: Date\n  renderFormInput: () => ReactNode | Element;\n}\n\nexport const InputDatePicker: React.FC<TInputDatePickerProps> = memo((props) => {\n  const {\n    birthday,\n    renderFormInput,\n  } = props;\n\n  const [startDate, setStartDate] = useState<Date>(birthday);\n\n  registerLocale('ru',ru);\n\n  return (\n    <div>\n      <DatePicker\n        locale={'ru'}\n        autoComplete={'new-password'}\n        wrapperClassName={css.DatePicker}\n        customInput={renderFormInput()}\n        selected={startDate}\n        onChange={(date: Date) => setStartDate(date)}\n        minDate={addYears(new Date(), -14)}\n        maxDate={addDays(new Date(), 5)}\n        showDisabledMonthNavigation\n        dateFormat=\"d MMMM, yyyy г.\"\n      />\n    </div>\n  );\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DatePicker\":\"InputDatePicker_DatePicker__1olx-\"};","import React, { memo, useCallback } from 'react';\nimport { Button, Container, Form } from \"react-bootstrap\";\nimport { useHistory } from \"react-router\";\n\nimport { useFormik } from \"formik\";\nimport InputMask from 'react-input-mask';\nimport * as Yup from 'yup';\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\n\nimport { InputDatePicker } from \"../../components/InputDatePicker/InputDatePicker\";\nimport { IFormValues } from \"../../store/participants/reducer\";\n\ntype THomeProps = {\n  currentUser: IFormValues\n  agreement: any\n\n  updateCurrentParticipant: (values: IFormValues) => void\n  setCurrentUser: (values: IFormValues) => void\n}\n\nexport const Profile: React.FC<THomeProps> = memo((props) => {\n  const {\n    currentUser,\n\n    updateCurrentParticipant,\n    setCurrentUser\n  } = props;\n\n  const {\n    FIO,\n    birthday,\n    email,\n    phone,\n    distance,\n    payment,\n    password,\n  } = currentUser;\n\n  const initialValues: IFormValues = {\n    FIO,\n    birthday,\n    email,\n    phone,\n    distance,\n    payment,\n    password,\n  };\n\n  const validationSchema = Yup.object({\n    FIO: Yup.string().required('Поле обязательно'),\n\n    email: Yup.string().email('Некорректная почта').required('Поле обязательно'),\n\n    phone: Yup.string().required('Поле обязательно'),\n\n    password:  Yup.string().required('Поле обязательно')\n      .min(3, 'Минимум 3 символа')\n      .max(10, 'Максимум 10 символов')\n  });\n\n  const history = useHistory();\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit: values => {\n      //alert(JSON.stringify(values, null, 2));\n      setCurrentUser(values);\n      updateCurrentParticipant(values);\n      history.push(\"/participants\");\n    },\n  });\n\n  const renderFormInput = useCallback(() => (\n    <Form.Control {...formik.getFieldProps(\"birthday\")} />\n  ), [formik]);\n\n  return (\n    <Container>\n      <Form\n        onSubmit={formik.handleSubmit}\n        className=\"row\"\n      >\n        <Form.Group className=\"col-xs-12 col-md-6 mb-3\" controlId=\"FIO\">\n          <Form.Label>Фамилия Имя Отчество</Form.Label>\n\n          <Form.Control {...formik.getFieldProps(\"FIO\")} />\n\n          {formik.errors.FIO ? <div className=\"invalid-field\">{formik.errors.FIO}</div> : null}\n        </Form.Group>\n\n        <Form.Group className=\"col-xs-12 col-md-6 mb-3\" controlId=\"birthday\">\n          <Form.Label>Дата рождения</Form.Label>\n\n          <InputDatePicker\n            renderFormInput={renderFormInput}\n            birthday={birthday}\n          />\n        </Form.Group>\n\n        <Form.Group className=\"col-xs-12 col-md-6 mb-3\" controlId=\"email\">\n          <Form.Label>Email</Form.Label>\n\n          <Form.Control {...formik.getFieldProps(\"email\")} />\n\n          {formik.errors.email ? <div className=\"invalid-field\">{formik.errors.email}</div> : null}\n        </Form.Group>\n\n        <Form.Group className=\"col-xs-12 col-md-6 mb-3\" controlId=\"phone\">\n          <Form.Label>Телефон</Form.Label>\n\n          <InputMask\n            mask=\"+7 (999) 999-99-99\"\n            className=\"form-control\"\n            {...formik.getFieldProps(\"phone\")}\n          />\n\n          {formik.errors.phone ? <div className=\"invalid-field\">{formik.errors.phone}</div> : null}\n        </Form.Group>\n\n        <Form.Group className=\"col-xs-12 col-md-6 mb-3\" controlId=\"distance\">\n          <Form.Label>Дистанция</Form.Label>\n\n          <Form.Control\n            as=\"select\"\n            onChange={formik.handleChange('distance')}\n            value={formik.values.distance}\n          >\n            <option value=\"3\">3 км.</option>\n            <option value=\"5\">5 км.</option>\n            <option value=\"10\">10 км.</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group className=\"col-xs-12 col-md-6 mb-3\" controlId=\"payment\">\n          <Form.Label>Сумма взноса, руб.</Form.Label>\n\n          <RangeSlider\n            inputProps={{name: \"payment\"}}\n            min={100}\n            max={10000}\n            tooltipPlacement=\"top\"\n            onChange={formik.handleChange('payment')}\n            value={formik.values.payment}\n          />\n        </Form.Group>\n\n        <Form.Group className=\"col-xs-12 col-md-6 mb-3\" controlId=\"password\">\n          <Form.Label>Пароль</Form.Label>\n\n          <Form.Control type=\"password\" {...formik.getFieldProps(\"password\")} />\n\n          {formik.errors.password ? <div className=\"invalid-field\">{formik.errors.password}</div> : null}\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\">\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            style={{maxWidth: 200}}\n            disabled={!!formik.errors.password || !!formik.errors.email}>\n            Сохранить\n          </Button>\n        </Form.Group>\n\n      </Form>\n    </Container>\n  );\n});","import React from 'react';\nimport { useSelector } from \"react-redux\";\n\nimport { useAppDispatch } from \"../../store\";\nimport { participantsSelectors } from \"../../store/participants/selectors\";\nimport { participantsAC } from \"../../store/participants/actions\";\nimport { IFormValues } from \"../../store/participants/reducer\";\n\nimport { Profile } from \"./Profile\";\n\nconst ProfileView = () => {\n  const currentUser = useSelector(participantsSelectors.currentUser);\n\n  const dispatch = useAppDispatch();\n\n  const updateCurrentParticipant = (values: IFormValues) => dispatch(participantsAC.updateCurrentParticipantAC(values));\n  const setCurrentUser = (values: IFormValues) => dispatch(participantsAC.setCurrentUserAC(values));\n\n  return (\n    <Profile\n      currentUser={currentUser}\n      agreement={false}\n\n      updateCurrentParticipant={updateCurrentParticipant}\n      setCurrentUser={setCurrentUser}\n    />\n  );\n};\n\nexport default ProfileView;"],"sourceRoot":""}